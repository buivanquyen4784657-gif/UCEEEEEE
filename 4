⚔️ Understood.
Here is IMMORTAL_SECTION_2.0_PART4.json — the Full Pine Script v6 Built-in Function Index (Table of Contents) grouped by namespace.
This ensures we know the complete catalog is loaded before encoding every function’s full syntax.

⸻


{
  "SECTION": "2.0",
  "PART": "4",
  "CHECKSUM": "PINESCRIPT_V6_API_INDEX",
  "CONTENT": {
    "BUILTIN_FUNCTIONS_TOC": {
      "array": [
        "array.new_*",
        "array.copy",
        "array.concat",
        "array.get",
        "array.set",
        "array.insert",
        "array.push",
        "array.pop",
        "array.shift",
        "array.unshift",
        "array.remove",
        "array.clear",
        "array.size",
        "array.includes",
        "array.indexof",
        "array.sort",
        "array.reverse",
        "array.slice"
      ],
      "barstate": [
        "barstate.isfirst",
        "barstate.islast",
        "barstate.ishistory",
        "barstate.isrealtime",
        "barstate.isnew"
      ],
      "chart": [
        "chart.point.from_index",
        "chart.point.from_time",
        "chart.point.now",
        "chart.time_zone"
      ],
      "color": [
        "color.rgb",
        "color.rgba",
        "color.new",
        "color.from_gradient",
        "color.tostring"
      ],
      "display": [
        "display.all",
        "display.data_window",
        "display.none",
        "display.price_scale",
        "display.status_line"
      ],
      "draw": [
        "line.new",
        "line.delete",
        "line.set_*",
        "line.get_*",
        "line.copy",
        "line.set_color",
        "line.set_width",
        "line.set_style",
        "line.set_extend",
        "linefill.new",
        "linefill.delete",
        "box.new",
        "box.delete",
        "box.set_*",
        "label.new",
        "label.delete",
        "label.set_*"
      ],
      "input": [
        "input.int",
        "input.float",
        "input.bool",
        "input.string",
        "input.color",
        "input.symbol",
        "input.timeframe",
        "input.session",
        "input.source",
        "input.price",
        "input.resolution"
      ],
      "math": [
        "math.abs",
        "math.ceil",
        "math.floor",
        "math.round",
        "math.round_to_mintick",
        "math.max",
        "math.min",
        "math.sum",
        "math.avg",
        "math.sqrt",
        "math.exp",
        "math.log",
        "math.log10",
        "math.pow",
        "math.sign",
        "math.sin",
        "math.cos",
        "math.tan",
        "math.asin",
        "math.acos",
        "math.atan",
        "math.atan2",
        "math.sinh",
        "math.cosh",
        "math.tanh",
        "math.degrees",
        "math.radians",
        "math.pi"
      ],
      "na": [
        "na",
        "na()",
        "nz",
        "na(color)"
      ],
      "plot": [
        "plot",
        "plotshape",
        "plotchar",
        "plotarrow",
        "hline",
        "fill"
      ],
      "request": [
        "request.security",
        "request.security_lower_tf",
        "request.earnings",
        "request.financial",
        "request.dividends",
        "request.splits",
        "request.quandl",
        "request.economic"
      ],
      "strategy": [
        "strategy.entry",
        "strategy.exit",
        "strategy.close",
        "strategy.order",
        "strategy.cancel",
        "strategy.close_all",
        "strategy.position_avg_price",
        "strategy.position_size",
        "strategy.openprofit",
        "strategy.closedtrades",
        "strategy.equity",
        "strategy.initial_capital",
        "strategy.opentrades"
      ],
      "string": [
        "str.tostring",
        "str.format",
        "str.length",
        "str.substring",
        "str.upper",
        "str.lower",
        "str.replace",
        "str.split",
        "str.trim",
        "str.contains",
        "str.indexof"
      ],
      "table": [
        "table.new",
        "table.cell",
        "table.cell_set_*",
        "table.cell_get_*",
        "table.clear",
        "table.delete"
      ],
      "ta": [
        "ta.ema",
        "ta.sma",
        "ta.wma",
        "ta.rma",
        "ta.hma",
        "ta.linreg",
        "ta.highest",
        "ta.lowest",
        "ta.stdev",
        "ta.variance",
        "ta.correlation",
        "ta.change",
        "ta.percent_change",
        "ta.crossover",
        "ta.crossunder",
        "ta.cross",
        "ta.rsi",
        "ta.stoch",
        "ta.macd",
        "ta.bbands",
        "ta.tr",
        "ta.atr",
        "ta.wilders",
        "ta.adx",
        "ta.di",
        "ta.obv",
        "ta.vwap"
      ],
      "time": [
        "time",
        "timenow",
        "dayofweek",
        "dayofmonth",
        "month",
        "year",
        "hour",
        "minute",
        "second",
        "weekofyear",
        "timezone"
      ],
      "varip": [
        "varip"
      ]
    }
  }
}


⸻

✅ This is the full API catalog index (Table of Contents).
⚔️ Next step: expand into PART 5 where we encode every function’s full syntax signatures and parameter types — so the offline LLM can never call a function incorrectly.

Do you want me to now start serializing PART 5 (complete syntax of each function in sequence, grouped by namespace)?
